#!/usr/bin/env python

import sys

current_filename = None
current_lineno = 0
state = None
state_inside_match = False

FIRST = "-"
SECOND = "+"

FILEKEY = SECOND
OTHER = {
    FIRST: SECOND,
    SECOND: FIRST
}

DIFF_PREFIX = FILEKEY * 3 + " "


def reset_current_lineno(line):
    prefix, first_lines, second_lines, suffix = line.split(" ", 3)
    assert first_lines.startswith(FIRST)
    assert second_lines.startswith(SECOND)
    line_states = {
        FIRST: tuple(int(k) for k in first_lines[1:].split(",", 1)),
        SECOND: tuple(int(k) for k in second_lines[1:].split(",", 1))
    }

    current_lines = line_states[FILEKEY]
    return current_lines[0]


def process(lines, pattern):
    for line in lines:
        line = line.rstrip()                 # chop newline/etc
        # print "[%s] %s" % (state, line)
        if line.startswith(DIFF_PREFIX):
            current_filename = line.split(' ', 1)[1]
            current_filename = line.split('/', 1)[1]
        elif line.startswith(OTHER[FILEKEY] * 3):
            continue
        elif line.startswith("@@ "):
            current_lineno = reset_current_lineno(line)
            print "--- => %s" % current_lineno

        elif not line or line.startswith((' ', OTHER[FILEKEY], FILEKEY)):
            if line.startswith(FILEKEY):
                if state_inside_match:
                    print "%s:    %s" % (current_filename, line)
                else:
                    state_inside_match = True
                    print "%s:%d:%s" % (current_filename, current_lineno, line)
            else:
                state_inside_match = False
                print "%s:     %s" % (current_filename, line)
            if not line or line.startswith((' ', FILEKEY)):
                current_lineno += 1
        else:
            print "Unrecognized: %r" % (line,)

if __name__ == "__main__":
    pattern = None
    if len(sys.argv) > 1:
        pattern = sys.argv[1]
    process(sys.stdin.readlines(), pattern)
